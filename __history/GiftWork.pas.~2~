unit GiftWork;

interface

uses
  CandyTypes, SysUtils, Classes, System.Generics.Collections;

type
  PGift = ^TGift;
  TGift = record
    Items: TCandysAdr;
    TotalSugar: Double;
    TotalCost: Integer;
    TotalWeight: Double;
    TypesCount: Integer;
    Next: PGift;
  end;

  TPopulation = array of PGift;

  procedure RunGeneticAlgorithm(
    var Population: TPopulation;
    Candies: TCandysAdr;
    Types: TTypeOfCandysAdr;
    MaxWeight: Double;
    MaxCost: Double;
    RequiredTypes: Integer;
    Generations: Integer
  );

  procedure FreePopulation(var Population: TPopulation);
  procedure PrintGift(Gift: PGift);

implementation

var
  GCandies: TCandysAdr;
  GTypes: TTypeOfCandysAdr;

procedure UpdateGiftStats(Gift: PGift);
var
  Current: TCandysAdr;
  Types: TStringList;
begin
  Gift^.TotalSugar := 0;
  Gift^.TotalCost := 0;
  Gift^.TotalWeight := 0;
  Gift^.TypesCount := 0;

  Types := TStringList.Create;
  try
    Types.Duplicates := dupIgnore;
    Current := Gift^.Items;
    while Current <> nil do
    begin
      Gift^.TotalSugar := Gift^.TotalSugar + Current^.Inf.Sugar;
      Gift^.TotalCost := Gift^.TotalCost + Current^.Inf.Cost;
      Gift^.TotalWeight := Gift^.TotalWeight + Current^.Inf.Weigth;
      Types.Add(IntToStr(Current^.Inf.TypeCandyKet));
      Current := Current^.Adr;
    end;
    Gift^.TypesCount := Types.Count;
  finally
    Types.Free;
  end;
end;

function GetUniqueTypes(Gift: PGift): TList<Integer>;
var
  Current: TCandysAdr;
begin
  Result := TList<Integer>.Create;
  Current := Gift^.Items;
  while Current <> nil do
  begin
    if not Result.Contains(Current^.Inf.TypeCandyKet) then
      Result.Add(Current^.Inf.TypeCandyKet);
    Current := Current^.Adr;
  end;
end;

function FindCandyByType(TypeKey: Integer): TCandysAdr;
var
  Current: TCandysAdr;
begin
  Current := GCandies;
  while Current <> nil do
  begin
    if Current^.Inf.TypeCandyKet = TypeKey then
      Exit(Current);
    Current := Current^.Adr;
  end;
  Result := nil;
end;

function CreateExactTypesGift(
  Candies: TCandysAdr;
  Types: TTypeOfCandysAdr;
  RequiredTypes: Integer;
  MaxWeight: Double;
  MaxCost: Double
): PGift;
var
  SelectedTypes: TList<Integer>;
  TypeNode: TTypeOfCandysAdr;
  Attempts: Integer;
begin
  New(Result);
  Result^.Items := nil;
  SelectedTypes := TList<Integer>.Create;
  Attempts := 0;

  try
    repeat
      SelectedTypes.Clear;
      TypeNode := Types;
      while (SelectedTypes.Count < RequiredTypes) and (TypeNode <> nil) do
      begin
        if not SelectedTypes.Contains(TypeNode^.Inf.PKey) then
        begin
          SelectedTypes.Add(TypeNode^.Inf.PKey);
          var Candy := FindCandyByType(TypeNode^.Inf.PKey);
          if Candy <> nil then
            Add(Result^.Items, Candy^.Inf);
        end;
        TypeNode := TypeNode^.Adr;
      end;
      Inc(Attempts);
    until (SelectedTypes.Count = RequiredTypes) or (Attempts > 100);

    UpdateGiftStats(Result);
  finally
    SelectedTypes.Free;
  end;
end;

function CalculateFitness(
  Gift: PGift;
  RequiredTypes: Integer;
  MaxWeight: Double;
  MaxCost: Double
): Double;
const
  Penalty = 1000;
begin
  Result := Gift^.TotalSugar;

  if Gift^.TypesCount <> RequiredTypes then
    Result := Result + Abs(Gift^.TypesCount - RequiredTypes) * Penalty;

  if Gift^.TotalWeight > MaxWeight then
    Result := Result + (Gift^.TotalWeight - MaxWeight) * Penalty;

  if Gift^.TotalCost > MaxCost then
    Result := Result + (Gift^.TotalCost - MaxCost) * Penalty;
end;

function TournamentSelection(
  Population: TPopulation;
  RequiredTypes: Integer;
  MaxWeight: Double;
  MaxCost: Double
): PGift;
var
  i: Integer;
  Candidate: PGift;
begin
  Result := Population[Random(Length(Population))];
  for i := 1 to 4 do
  begin
    Candidate := Population[Random(Length(Population))];
    if CalculateFitness(Candidate, RequiredTypes, MaxWeight, MaxCost) <
       CalculateFitness(Result, RequiredTypes, MaxWeight, MaxCost) then
      Result := Candidate;
  end;
end;

procedure CrossoverGifts(
  Parent1, Parent2: PGift;
  var Child: PGift;
  RequiredTypes: Integer
);
var
  Types1, Types2: TList<Integer>;
  i: Integer;
begin
  New(Child);
  Child^.Items := nil;

  Types1 := GetUniqueTypes(Parent1);
  Types2 := GetUniqueTypes(Parent2);
  try
    for i := 0 to RequiredTypes div 2 - 1 do
      if i < Types1.Count then
        Add(Child^.Items, FindCandyByType(Types1[i])^.Inf);

    for i := 0 to RequiredTypes div 2 - 1 do
      if i < Types2.Count then
        Add(Child^.Items, FindCandyByType(Types2[i])^.Inf);

    UpdateGiftStats(Child);
  finally
    Types1.Free;
    Types2.Free;
  end;
end;

// Удаление сладости из подарка
procedure DeleteCandyFromGift(Gift: PGift; Candy: TCandysAdr);
var
  Current, Prev: TCandysAdr;
begin
  Prev := nil;
  Current := Gift^.Items;
  while Current <> nil do
  begin
    if Current = Candy then
    begin
      if Prev = nil then
        Gift^.Items := Current^.Adr
      else
        Prev^.Adr := Current^.Adr;
      Dispose(Current);
      Break;
    end;
    Prev := Current;
    Current := Current^.Adr;
  end;
end;

// Поиск первой сладости по типу
function FindFirstCandyByType(TypeKey: Integer): TCandysAdr;
begin
  Result := GCandies;
  while Result <> nil do
  begin
    if Result^.Inf.TypeCandyKet = TypeKey then
      Exit;
    Result := Result^.Adr;
  end;
end;

// Добавление сладости в подарок
procedure AddCandyToGift(Gift: PGift; Candy: TCandysInf);
var
  NewItem: TCandysAdr;
begin
  New(NewItem);
  NewItem^.Inf := Candy;
  NewItem^.Adr := Gift^.Items;
  Gift^.Items := NewItem;
end;

procedure ReplaceTypeInGift(
  Gift: PGift;
  OldType: Integer;
  NewType: Integer
);
var
  CurrentCandy: TCandysAdr;
  NewCandy: TCandysAdr;
begin
  // 1. Удаляем все сладости старого типа
  CurrentCandy := Gift^.Items;
  while CurrentCandy <> nil do
  begin
    if CurrentCandy^.Inf.TypeCandyKet = OldType then
      DeleteCandyFromGift(Gift, CurrentCandy);
    CurrentCandy := CurrentCandy^.Adr;
  end;

  // 2. Добавляем случайную сладость нового типа
  NewCandy := FindFirstCandyByType(NewType);
  if NewCandy <> nil then
    AddCandyToGift(Gift, NewCandy^.Inf);
end;

procedure MutateGift(
  Gift: PGift;
  RequiredTypes: Integer
);
var
  OldType: Integer;
  NewTypeKey: Integer;
  AvailableTypes: TList<Integer>;
  NewTypeNode: TTypeOfCandysAdr;
begin
  if Random < 0.1 then // 10% вероятность мутации
  begin
    // Получаем уникальные типы в текущем подарке
    var CurrentTypes := GetUniqueTypes(Gift);
    try
      if CurrentTypes.Count > 0 then
      begin
        // 1. Выбираем случайный тип из текущих
        OldType := CurrentTypes[Random(CurrentTypes.Count)];

        // 2. Создаем список доступных типов (исключая текущий)
        AvailableTypes := TList<Integer>.Create;
        try
          NewTypeNode := GTypes;
          while NewTypeNode <> nil do
          begin
            if NewTypeNode^.Inf.PKey <> OldType then
              AvailableTypes.Add(NewTypeNode^.Inf.PKey);
            NewTypeNode := NewTypeNode^.Adr;
          end;

          // 3. Если есть другие типы для замены
          if AvailableTypes.Count > 0 then
          begin
            // 4. Случайно выбираем новый тип
            NewTypeKey := AvailableTypes[Random(AvailableTypes.Count)];

            // 5. Заменяем все вхождения старого типа
            ReplaceTypeInGift(Gift, OldType, NewTypeKey);
          end;
        finally
          AvailableTypes.Free;
        end;
      end;
    finally
      CurrentTypes.Free;
    end;
  end;

  // Обновляем статистику даже если мутации не было
  UpdateGiftStats(Gift);
end;
procedure RunGeneticAlgorithm(
  var Population: TPopulation;
  Candies: TCandysAdr;
  Types: TTypeOfCandysAdr;
  MaxWeight: Double;
  MaxCost: Double;
  RequiredTypes: Integer;
  Generations: Integer
);
var
  i, j: Integer;
  NewPopulation: TPopulation;
begin
  GCandies := Candies;
  GTypes := Types;

  SetLength(Population, 100);
  for i := 0 to High(Population) do
    Population[i] := CreateExactTypesGift(Candies, Types, RequiredTypes, MaxWeight, MaxCost);

  for j := 1 to Generations do
  begin
    SetLength(NewPopulation, Length(Population));

    var BestIndex := 0;
    for i := 1 to High(Population) do
      if CalculateFitness(Population[i], RequiredTypes, MaxWeight, MaxCost) <
         CalculateFitness(Population[BestIndex], RequiredTypes, MaxWeight, MaxCost) then
        BestIndex := i;
    NewPopulation[0] := Population[BestIndex];

    for i := 1 to High(NewPopulation) do
    begin
      var Parent1 := TournamentSelection(Population, RequiredTypes, MaxWeight, MaxCost);
      var Parent2 := TournamentSelection(Population, RequiredTypes, MaxWeight, MaxCost);
      var Child: PGift;
      CrossoverGifts(Parent1, Parent2, Child, RequiredTypes);
      MutateGift(Child, RequiredTypes);
      NewPopulation[i] := Child;
    end;

    for i := 0 to High(Population) do
      if i <> BestIndex then
        Dispose(Population[i]);
    Population := NewPopulation;
  end;
end;

procedure FreePopulation(var Population: TPopulation);
var
  i: Integer;
begin
  for i := 0 to High(Population) do
    Dispose(Population[i]);
  SetLength(Population, 0);
end;

procedure PrintGift(Gift: PGift);
var
  Current: TCandysAdr;
begin
  Writeln('Содержание подарка:');
  Current := Gift^.Items;
  while Current <> nil do
  begin
    Writeln(' - ', Current^.Inf.Name,
      ' (Тип: ', Current^.Inf.TypeCandyKet,
      ', Сахар: ', Current^.Inf.Sugar:0:1, 'г',
      ', Вес: ', Current^.Inf.Weigth:0:1, 'г',
      ', Стоимость: ', Current^.Inf.Cost, 'руб)');
    Current := Current^.Adr;
  end;
  Writeln('Итого:');
  Writeln('Сахар: ', Gift^.TotalSugar:0:1, 'г');
  Writeln('Вес: ', Gift^.TotalWeight:0:1, 'г');
  Writeln('Стоимость: ', Gift^.TotalCost, 'руб');
  Writeln('Количество типов: ', Gift^.TypesCount);
end;

end.
