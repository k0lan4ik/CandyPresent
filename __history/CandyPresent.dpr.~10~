program CandyPresent;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils,
  Windows;

type
  TCandysInf = record
    PKey: Integer;
    Name: String[200];
    Cost: Integer;
    Weigth: Real;
  end;

  TCandysAdr = ^TCandys;

  TCandys = record
    Inf: TCandysInf;
    Adr: TCandysAdr;
  end;

  TTypeOfCandysInf = record
    PKey: Integer;
    Name: String[200];
    Candys: TCandysAdr;
  end;

  TTypeOfCandysAdr = ^TTypeOfCandys;

  TTypeOfCandys = record
    Inf: TTypeOfCandysInf;
    Adr: TTypeOfCandysAdr;
  end;

procedure ShowLists();
begin

end;

const
  MENU_ITEMS: array[1..10] of string = (
    '1.	Чтение данных из файла',
    '2.	Просмотр всего списка',
    '3.	Сортировка данных в соответствии с заданием',
    '4.	Поиск данных с использованием фильтров',
    '5.	Добавление данных в список',
    '6.	Удаление данных из списка',
    '7.	Редактирование данных',
    '8. Создание новогоднего подарка',
    '9.	Выход из программы без сохранения изменений',
    '10.Выход с сохранением изменений'
  );

var
  SelectedItem: Integer = 0;
  hConsole: THandle;
  ConsoleWidth: Integer;

// Объявления функций WinAPI
procedure SetConsoleTextAttribute(hConsoleOutput: THandle; wAttributes: Word); stdcall; external 'kernel32.dll';
function GetStdHandle(nStdHandle: DWORD): THandle; stdcall; external 'kernel32.dll';
function GetConsoleScreenBufferInfo(hConsoleOutput: THandle; var lpConsoleScreenBufferInfo: CONSOLE_SCREEN_BUFFER_INFO): BOOL; stdcall; external 'kernel32.dll';

// Получение ширины консоли
procedure UpdateConsoleWidth;
var
  info: CONSOLE_SCREEN_BUFFER_INFO;
begin
  GetConsoleScreenBufferInfo(hConsole, info);
  ConsoleWidth := info.dwSize.X;
end;

// Очистка консоли
procedure ClearConsole;
var
  coord: TCoord;
  count, numWritten: DWORD;
begin
  coord.X := 0;
  coord.Y := 0;
  UpdateConsoleWidth;
  count := ConsoleWidth * 100;
  FillConsoleOutputCharacter(hConsole, ' ', count, coord, numWritten);
  SetConsoleCursorPosition(hConsole, coord);
end;

// Отрисовка меню с полным выделением строки
procedure DrawMenu;
var
  i: Integer;
  textLine: string;
  spaces: string;
begin
  ClearConsole;
  UpdateConsoleWidth;

  for i := Low(MENU_ITEMS) to High(MENU_ITEMS) do
  begin
    textLine := ' ' + MENU_ITEMS[i];
    if Length(textLine) > ConsoleWidth - 1 then
      textLine := Copy(textLine, 1, ConsoleWidth - 2) + '…';

    spaces := StringOfChar(' ', ConsoleWidth - (Length(textLine)+1));

    if i = SelectedItem then
    begin
      // Выделенная строка
      SetConsoleTextAttribute(hConsole, BACKGROUND_BLUE or FOREGROUND_INTENSITY);SetConsoleTextAttribute(hConsole, FOREGROUND_RED or FOREGROUND_GREEN or FOREGROUND_BLUE or BACKGROUND_BLUE);
      Write(textLine);
      Write(spaces);
    end
    else
    begin
      // Обычная строка
      SetConsoleTextAttribute(hConsole, FOREGROUND_INTENSITY or FOREGROUND_RED or FOREGROUND_GREEN or FOREGROUND_BLUE);
      Write(textLine);
      Write(spaces);
    end;
    Writeln;
  end;

  // Сброс цветов
  SetConsoleTextAttribute(hConsole, FOREGROUND_INTENSITY or FOREGROUND_RED or FOREGROUND_GREEN or FOREGROUND_BLUE);
end;

// Обработка клавиш
function ReadKey: Word;
var
  InputRec: TInputRecord;
  NumRead: Cardinal;
begin
  while True do
  begin
    ReadConsoleInput(GetStdHandle(STD_INPUT_HANDLE), InputRec, 1, NumRead);
    if (InputRec.EventType = KEY_EVENT) and InputRec.Event.KeyEvent.bKeyDown then
      Exit(InputRec.Event.KeyEvent.wVirtualKeyCode);
  end;
end;

begin
  hConsole := GetStdHandle(STD_OUTPUT_HANDLE);

  while True do
  begin
    DrawMenu;
    case ReadKey of
      VK_UP: if SelectedItem > 0 then Dec(SelectedItem);
      VK_DOWN: if SelectedItem < High(MENU_ITEMS) then Inc(SelectedItem);
      VK_RETURN:
        begin
          ClearConsole;
          Writeln('Выбран пункт: ', MENU_ITEMS[SelectedItem]);
          if SelectedItem = High(MENU_ITEMS) then Break;
          Sleep(2000);
        end;
      VK_ESCAPE: Break;
    end;
  end;

  // Восстановление цветов
  SetConsoleTextAttribute(hConsole, FOREGROUND_INTENSITY or FOREGROUND_RED or FOREGROUND_GREEN or FOREGROUND_BLUE);
end.
