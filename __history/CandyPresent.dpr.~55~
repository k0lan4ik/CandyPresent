program CandyPresent;

{$APPTYPE CONSOLE}
{$R *.res}

uses
  System.SysUtils,
  FileWork in 'FileWork.pas',
  CandyTypes in 'CandyTypes.pas',
  Menu in 'Menu.pas';

const
  MAIN_MENU: array [1 .. 10] of string = ('1. Чтение данных из файла',
    '2. Просмотр всего списка',
    '3. Сортировка данных в соответствии с заданием',
    '4. Поиск данных с использованием фильтров',
    '5. Добавление данных в список', '6. Удаление данных из списка',
    '7. Редактирование данных', '8. Создание новогоднего подарка',
    '9. Выход из программы без сохранения изменений',
    '10.Выход с сохранением изменений');
  LISTS_ARRAY: array [1 .. 2] of string = ('Cписок сладостей','Список типов сладостей');

var
  headType: TTypeOfCandysAdr;
  headCandy: TCandysAdr;
  info: TTypeOfCandysAdrs;
  pkType, pkCandy, i: Integer;

procedure ReadTypeList(var p: TTypeOfCandysAdr);
var
  i: Integer;
begin
  ClearConsole;
  Write('Введите число элементов: ');
  Readln(i);
  Writeln;
  for i := 1 to i do
  begin
    Write('Введите ИМЯ типа ', i, ': ');
    Readln(p^.Inf.Name);
    p^.Inf.PKey := pkType;
    Add(p,p^.Inf);
    inc(pkType);
  end;
end;

procedure ReadCandyList(var p: TCandysAdr);
var
  i: Integer;
  temp : String;
begin
  ClearConsole;
  Write('Введите число элементов: ');
  Readln(i);
  Writeln;
  for i := 1 to i do
  begin
    Write('Введите ИМЯ сладости ', i, ': ');
    Readln(p^.Inf.Name);
    Write('Введите ТИП сладости ', i, ': ');
    Readln(headType^.Inf.Name);
    p^.Inf.TypeCandyKet := Find(headType,headType^.Inf,CompareTCName)[0]^.Inf.PKey;
    Write('Введите СТОЙМОСТЬ сладости ', i, ': ');
    Readln(p^.Inf.Cost);
    Write('Введите ВЕС сладости ', i, ': ');
    Readln(p^.Inf.Weigth);
    p^.Inf.PKey := pkCandy;
    Add(p, p^.Inf);
  end;

end;

procedure WriteTypeList(p: TTypeOfCandysAdr);
var
  temp: TTypeOfCandysAdr;
begin
  Writeln('pk ---- имя');
  while p^.Adr <> nil do
  begin
    p := p^.Adr;
    Writeln(p^.Inf.PKey, ' ---- ', p^.Inf.Name);
  end;
end;


procedure WriteCandyList(p: TCandysAdr);
var
  temp: TCandysAdr;
begin
  Writeln('pk ---- имя ---- тип ---- стоимость ---- вес');
  while p^.Adr <> nil do
  begin
    p := p^.Adr;
    headType^.Inf.PKey := p^.Inf.TypeCandyKet;
    Writeln(p^.Inf.PKey, ' ---- ', p^.Inf.Name, ' ---- ', Find(headType, headType^.Inf,CompareTCPKey)[0]^.Inf.Name, ' ---- ', p^.Inf.Cost, ' ---- ', p^.Inf.Weigth);
  end;
end;

procedure ReadFromFile();
var
  val1, val2: Integer;
begin
  val1 := LoadFromFile(headType, 'test.dcu');
  val2 := LoadFromFile(headCandy, 'test.dcu');
  if (val1 <> -1) and (val2 <> -1) then
  begin
    BaseInfo(['Чтение с файла прошло успешно']);
    pkType := val1;
    pkCandy := val2;
  end
  else
    BaseInfo(['Ошибка чтение с файла']);
end;

procedure PrintList();
begin
   case BaseMenu(LISTS_ARRAY) of
    0: WriteCandyList(headCandy);
    1: WriteTypeList(headType);
  end;

end;

procedure AddToList();
begin
  case BaseMenu(LISTS_ARRAY) of
    0: ReadCandyList(headCandy);
    1: ReadTypeList(headType);
  end;
  BaseInfo(['Элемент(-ы) был(-и) добавлен(-ы)']);
end;

procedure MainMenu();
begin
  while true do
  begin
    case BaseMenu(MAIN_MENU) of
      0:
        ReadFromFile();
      1:
        PrintList();
      4:
        AddToList();
      9:
        begin
          SaveToFile(headType, 'test.dcu');
          SaveToFile(headCandy, 'test.dcu');
          Break;
        end;
      -1,8:
        Break;
    end;

  end;
end;

begin
  New(headType);
  headType^.Adr := nil;

  New(headCandy);
  headCandy^.Adr := nil;

  MainMenu();
  // ReadList(head);
  Sort(headType^.Adr, CompareTCName);
  WriteTypeList(headType);
  Readln(headType^.Inf.Name);
  info := Find(headType^.Adr, headType^.Inf, CompareTCName);
  i := 0;
  while (i <= High(info)) and (info[i] <> nil) do
  begin
    Writeln(info[i]^.Inf.PKey, ' ---- ', info[i]^.Inf.Name);
    inc(i);
  end;

  Readln(i);
  Delete(headType, i);
  WriteTypeList(headType);

  Readln(headType^.Inf.Name);
  headType^.Inf.PKey := pkType;
  Add(headType, headType^.Inf);

  Readln;
  SaveToFile(headType, 'test.dcu');
  SaveToFile(headCandy, 'test.dcu');

  Clear(headType);
  Clear(headCandy);
end.
