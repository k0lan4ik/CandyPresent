unit FileWork;

interface

uses
  CandyTypes;

function SaveToFile(TypeOfCandys: TTypeOfCandysAdr; Road: String)
  : Integer; overload;
function SaveToFile(Candys: TCandysAdr; Road: String):Integer; overload;
function LoadFromFile(var TypeOfCandy: TTypeOfCandysAdr; Road: String)
  : Integer; overload;
function LoadFromFile(var Candy: TCandysAdr; Road: String): Integer; overload;

implementation

type

  TFileTypeOfCandy = File of TTypeOfCandysInf;
  TFileCandy = File of TCandysInf;

function SaveToFile(TypeOfCandys: TTypeOfCandysAdr; Road: String)
  : Integer; overload;
var
  Save: TFileTypeOfCandy;
begin
  try
    AssignFile(Save, Road);
    Rewrite(Save);
    While TypeOfCandys^.Adr <> nil do
    begin
      TypeOfCandys := TypeOfCandys^.Adr;
      Write(Save, TypeOfCandys^.Inf);
    end;

  except
    Result := -1;
    Close(Save);
  end;
  Close(Save);
end;

function SaveToFile(Candys: TCandysAdr; Road: String):Integer; overload;
var
  Save: TFileCandy;
begin
  try
    AssignFile(Save, Road);
    Rewrite(Save);
    While Candys^.Adr <> nil do
    begin
      Candys := Candys^.Adr;
      Write(Save, Candys^.Inf);
    end;
  except
    Result := -1;
    Close(Save);
  end;
  Close(Save);
end;

function LoadFromFile(var TypeOfCandy: TTypeOfCandysAdr; Road: String)
  : Integer; overload;
var
  Save: TFileTypeOfCandy;
  temp: TTypeOfCandysAdr;
  Inf: TTypeOfCandysInf;
begin
  AssignFile(Save, Road);
  try
    Reset(Save);
    Result := 0;
    temp := TypeOfCandy;
    Clear(TypeOfCandy^.Adr);
    While not EOF(Save) do
    begin
      Read(Save, Inf);
      New(temp^.Adr);
      temp := temp^.Adr;
      temp.Inf := Inf;
      temp.Adr := nil;
      if Inf.PKey > Result then
        Result := Inf.PKey;
    end;

    Inc(Result);
  except
    Close(Save);
    Result := -1;
  end;
  Close(Save);
end;

function LoadFromFile(var Candy: TCandysAdr; Road: String): Integer; overload;
var
  Save: TFileCandy;
  temp: TCandysAdr;
  Inf: TCandysInf;
begin
  AssignFile(Save, Road);
  try
    Reset(Save);
    Result := 0;
    temp := Candy;
    Clear(Candy^.Adr);
    While not EOF(Save) do
    begin
      Read(Save, Inf);
      New(temp^.Adr);
      temp := temp^.Adr;
      temp.Inf := Inf;
      temp.Adr := nil;
      if Inf.PKey > Result then
        Result := Inf.PKey;
    end;
    Inc(Result);
  except
    Close(Save);
    Result := -1;
  end;
  Close(Save);
end;

end.
